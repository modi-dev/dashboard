# PowerShell —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –ø—Ä–æ–±–ª–µ–º —Å –ø–æ–¥–∞–º–∏

Write-Host "üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º —Å –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º –ø–æ–¥–æ–≤..." -ForegroundColor Green

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 1: Backend –∑–∞–ø—É—â–µ–Ω?
Write-Host "`n1. –ü—Ä–æ–≤–µ—Ä–∫–∞ backend..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001/api/version/config" -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        $config = $response.Content | ConvertFrom-Json
        Write-Host "‚úÖ Backend –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
        Write-Host "   Kubernetes enabled: $($config.enabled)" -ForegroundColor White
        Write-Host "   Namespace: $($config.namespace)" -ForegroundColor White
        Write-Host "   Kubectl path: $($config.kubectlPath)" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Backend –Ω–µ –∑–∞–ø—É—â–µ–Ω –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    Write-Host "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd backend && mvn spring-boot:run" -ForegroundColor Yellow
    exit 1
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 2: Kubernetes API –¥–æ—Å—Ç—É–ø–µ–Ω?
Write-Host "`n2. –ü—Ä–æ–≤–µ—Ä–∫–∞ Kubernetes API..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001/api/version/health" -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Kubernetes API –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
        Write-Host "   $($response.Content)" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Kubernetes API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Red
    Write-Host "   –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor White
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 3: –¢–µ—Å—Ç–æ–≤—ã–π endpoint
Write-Host "`n3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Kubernetes —Å–µ—Ä–≤–∏—Å–∞..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3001/api/version/test" -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        $testResult = $response.Content | ConvertFrom-Json
        Write-Host "‚úÖ –¢–µ—Å—Ç –ø—Ä–æ—à–µ–ª —É—Å–ø–µ—à–Ω–æ" -ForegroundColor Green
        Write-Host "   –°—Ç–∞—Ç—É—Å: $($testResult.status)" -ForegroundColor White
        Write-Host "   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–æ–≤: $($testResult.podsCount)" -ForegroundColor White
        Write-Host "   –°–æ–æ–±—â–µ–Ω–∏–µ: $($testResult.message)" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ—à–µ–ª" -ForegroundColor Red
    Write-Host "   –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor White
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 4: kubectl –¥–æ—Å—Ç—É–ø–µ–Ω?
Write-Host "`n4. –ü—Ä–æ–≤–µ—Ä–∫–∞ kubectl..." -ForegroundColor Yellow
try {
    $kubectlVersion = kubectl version --client --output=yaml 2>$null
    if ($kubectlVersion) {
        Write-Host "‚úÖ kubectl –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
    }
} catch {
    Write-Host "‚ùå kubectl –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
    Write-Host "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ kubectl –∏–ª–∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ PATH" -ForegroundColor Yellow
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 5: Minikube –∑–∞–ø—É—â–µ–Ω?
Write-Host "`n5. –ü—Ä–æ–≤–µ—Ä–∫–∞ Minikube..." -ForegroundColor Yellow
try {
    $minikubeStatus = minikube status 2>$null
    if ($minikubeStatus -match "Running") {
        Write-Host "‚úÖ Minikube –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Green
    } else {
        Write-Host "‚ö†Ô∏è Minikube –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Yellow
        Write-Host "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: minikube start --driver=docker --addons=ingress" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Minikube –Ω–µ –Ω–∞–π–¥–µ–Ω" -ForegroundColor Red
    Write-Host "   –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Minikube" -ForegroundColor Yellow
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 6: –ï—Å—Ç—å –ª–∏ –ø–æ–¥—ã –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ?
Write-Host "`n6. –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–æ–≤ –≤ –∫–ª–∞—Å—Ç–µ—Ä–µ..." -ForegroundColor Yellow
try {
    $pods = kubectl get pods --all-namespaces --field-selector=status.phase==Running -o json 2>$null | ConvertFrom-Json
    if ($pods.items.Count -gt 0) {
        Write-Host "‚úÖ –ù–∞–π–¥–µ–Ω–æ $($pods.items.Count) –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–¥–æ–≤" -ForegroundColor Green
        foreach ($pod in $pods.items) {
            Write-Host "   - $($pod.metadata.name) –≤ namespace $($pod.metadata.namespace)" -ForegroundColor White
        }
    } else {
        Write-Host "‚ö†Ô∏è –ó–∞–ø—É—â–µ–Ω–Ω—ã—Ö –ø–æ–¥–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ" -ForegroundColor Yellow
        Write-Host "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ dev-tools: .\deploy-dev-tools.ps1" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∞—Ö" -ForegroundColor Red
    Write-Host "   –û—à–∏–±–∫–∞: $($_.Exception.Message)" -ForegroundColor White
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ 7: Frontend –¥–æ—Å—Ç—É–ø–µ–Ω?
Write-Host "`n7. –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend..." -ForegroundColor Yellow
try {
    $response = Invoke-WebRequest -Uri "http://localhost:3000" -UseBasicParsing
    if ($response.StatusCode -eq 200) {
        Write-Host "‚úÖ Frontend –¥–æ—Å—Ç—É–ø–µ–Ω" -ForegroundColor Green
        Write-Host "   –û—Ç–∫—Ä–æ–π—Ç–µ: http://localhost:3000" -ForegroundColor White
    }
} catch {
    Write-Host "‚ùå Frontend –Ω–µ –∑–∞–ø—É—â–µ–Ω" -ForegroundColor Red
    Write-Host "   –ó–∞–ø—É—Å—Ç–∏—Ç–µ: cd client && npm start" -ForegroundColor Yellow
}

Write-Host "`nüéØ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:" -ForegroundColor Cyan
Write-Host "1. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ backend –∑–∞–ø—É—â–µ–Ω —Å kubernetes.enabled=true" -ForegroundColor White
Write-Host "2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ, —á—Ç–æ kubectl –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω" -ForegroundColor White
Write-Host "3. –ó–∞–ø—É—Å—Ç–∏—Ç–µ Minikube –∏ dev-tools –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è" -ForegroundColor White
Write-Host "4. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ backend –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏" -ForegroundColor White

Write-Host "`n‚úÖ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!" -ForegroundColor Green
